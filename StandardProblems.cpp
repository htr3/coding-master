// all standard problems for placement 
// =================================================================================================
 //=================================================================================================
//  ==================================================================================================
// Linked List 

// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

// problem 1. 




// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

// Array 
// =================================================================================================
//  =================================================================================================
//  ==================================================================================================
 
// Problem 1. Spiral matrix 
  
vector<int> spiralOrder(vector<vector<int> >& matrix)
{
    int m = matrix.size(), n = matrix[0].size();
    vector<int> ans;
  
    if (m == 0)
        return ans;
  
    vector<vector<bool> > seen(m, vector<bool>(n, false));
    int dr[] = { 0, 1, 0, -1 };
    int dc[] = { 1, 0, -1, 0 };
  
    int x = 0, y = 0, di = 0;
  
    // Iterate from 0 to m * n - 1
    for (int i = 0; i < m * n; i++) {
        ans.push_back(matrix[x][y]);
        // on normal geeksforgeeks ui page it is showing
        // 'ans.push_back(matrix[x])' which gets copied as
        // this only and gives error on compilation,
        seen[x][y] = true;
        int newX = x + dr[di];
        int newY = y + dc[di];
  
        if (0 <= newX && newX < m && 0 <= newY && newY < n
            && !seen[newX][newY]) {
            x = newX;
            y = newY;
        }
        else {
            di = (di + 1) % 4;
            x += dr[di];
            y += dc[di];
        }
    }
    return ans;
}
// ling-> https://www.geeksforgeeks.org/print-a-given-matrix-in-spiral-form/
//   .......................................................................................


// Problem 2 




// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

// Dynamic Programming 
// =================================================================================================
//  =================================================================================================
//  ==================================================================================================






// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

// Recursion & Backtracking
// =================================================================================================
//  =================================================================================================
//  ==================================================================================================




// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

// Stack And Queue 
// =================================================================================================
//  =================================================================================================
//  ==================================================================================================




// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

// String 
// =================================================================================================
//  =================================================================================================
//  ==================================================================================================





// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

// Graph 
// =================================================================================================
//  =================================================================================================
//  ==================================================================================================




// =================================================================================================
//  =================================================================================================
//  ==================================================================================================

//Trie
// =================================================================================================
//  =================================================================================================
//  ==================================================================================================



